# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import QThread, QObject, pyqtSignal
import numpy as np
import cv2 as cv
import slideai.slideai
import time
from os.path import exists
import os
import math
import torch
import torchvision
import argparse
import torch.utils.data
import torch.profiler
import slideai.slideai
import matplotlib.pyplot as plt
import time

import torchvision.models as models
import torchvision.transforms as transforms

from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
from torchvision.models.detection.mask_rcnn import MaskRCNNPredictor
from torchvision.transforms import functional as F
from PIL import Image
from PIL import ImageFilter
from PIL import ImageDraw
from tqdm import tqdm
from datetime import datetime
from xml.etree import ElementTree
from os.path import exists
from torchvision.models.detection.backbone_utils import resnet_fpn_backbone, _validate_trainable_layers
from torchvision.models.detection import MaskRCNN
import copy
from Main_model_2 import TileDataset, TileDatasetTest, get_model_instance_segmentation, albumentations_transforms
from PyQt5 import QtCore, QtGui, QtWidgets

class WsiSegmentWorker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def run(self):
        file = ui.filename
        print('run', QThread.currentThreadId())
        device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
        tile_size = 500
        scale = 1
        save_mask = True
        path_trained_model = 'C:/Users/ghait/PycharmProjects/NYU_CBRD/save/train/M1-01/checkpointM1_8.pth'

        segmentation_model = get_model_instance_segmentation(2)
        ckpt_dict = torch.load(path_trained_model, map_location=device)
        segmentation_model.load_state_dict(ckpt_dict['model'])
        segmentation_model.to(device)
        segmentation_model.eval()

        classifier = models.vgg11_bn(pretrained=False, progress=True, num_classes=2)
        classifier.load_state_dict(torch.load('C:/Users/ghait/Desktop/NYU_Project/Tile classifier Training set/Classifier training set/Trained_models/Classifier_net_VGG11_v3.pth'))
        classifier.eval()
        classifier.to(device)

        outputs_path, file_name = (os.path.dirname(file), os.path.basename(file)[:-4])
        sld = slideai.slideai.SlideAi(file)
        width, height = sld.dimensions
        Pred_seg_mask = Image.new('L', (width, height))

        h_idx, v_idx = (width // tile_size), (height // tile_size)

        ui.progressBar.setMaximum(h_idx)
        if tile_size == 500:
            TT = transforms.Compose(
                [transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

        elif tile_size != 500:
            TT = transforms.Compose(
                [transforms.Resize((tile_size, tile_size)),
                 transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

        My_to_tensor = transforms.Compose(
            [transforms.ToTensor()])
        HH = 0

        for H in range(h_idx):
            HH += 1
            self.progress.emit(HH)

            #ui.progressBar.setValue(HH)
            for V in range(v_idx):

                tile_RGB = (sld.read_region((0 + tile_size * H,
                                             0 + tile_size * V),
                                            0,
                                            (tile_size, tile_size))).convert('RGB')
                img_tensor = My_to_tensor(tile_RGB)
                img_tensor = img_tensor.to(device)
                img_tensor2 = TT(img_tensor)
                img_tensor2 = img_tensor2.unsqueeze(0)
                class_output = classifier(img_tensor2)
                pred_class = torch.argmax(class_output)
                if pred_class == 1:
                    with torch.no_grad():
                        test_img_T = img_tensor
                        test_img_T2 = test_img_T.unsqueeze(0)
                        main_output = segmentation_model(test_img_T2)
                        pred_mask = main_output[0]["masks"][0] * main_output[0]["scores"][0]
                        pred_mask = pred_mask[0, :, :]
                        pred_mask = pred_mask * 255
                        pred_mask = pred_mask.cpu().numpy()
                        pred_mask_PIL = Image.fromarray(pred_mask)
                        Pred_seg_mask.paste(pred_mask_PIL, (0 + tile_size * H, 0 + tile_size * V))
        original_size = Pred_seg_mask.size
        Pred_seg_mask_scaled = Pred_seg_mask.resize(
            (math.ceil(original_size[0] / scale), math.ceil(original_size[1] / scale)))
        if save_mask:
            Pred_seg_mask_scaled.save(outputs_path + "/" + file_name + "_mask.png")
        full_img = sld.read_region((0,0), 0, sld.dimensions)
        full_img.save(outputs_path + "/" + file_name + ".png")
        return

class MyView(QtWidgets.QGraphicsView):
    def __init__(self, t):
        super().__init__(t)
        self.zoom = 1
        self.rotate = 0

    def fitInView(self, *args, **kwargs):
        super().fitInView(*args, **kwargs)
        self.zoom = self.transform().m11()

    def wheelEvent(self, event):
        x = event.angleDelta().y() / 120
        if x > 0:
            self.zoom *= 1.05
            self.updateView()
        elif x < 0:
            self.zoom /= 1.05
            self.updateView()

    def updateView(self):
        self.setTransform(QtGui.QTransform().scale(self.zoom, self.zoom).rotate(self.rotate))

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(800, 500)
        Form.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(0, 0, 800, 500))

        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(".\\../../Desktop/NYU_Project/nyuhealth.jpg"))
        self.label.setObjectName("label")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        print('0', QThread.currentThreadId())
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1818, 1239)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(11, 56, 16, 16))
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(11, 38, 16, 16))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap(".\\NYU_langone_health_logo.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(90, 30, 16, 16))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap(".\\CBRD.png"))
        self.label_3.setScaledContents(True)
        self.label_3.setWordWrap(False)
        self.label_3.setObjectName("label_3")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(520, 50, 261, 27))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setMouseTracking(False)
        self.horizontalSlider.setAutoFillBackground(False)
        self.horizontalSlider.setMinimum(75)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setPageStep(5)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.horizontalSlider.setTickInterval(0)
        self.horizontalSlider.setValue(98)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.valueChanged.connect(self.slider_changed)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(11, 288, 16, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setEnabled(True)
        self.pushButton.setGeometry(QtCore.QRect(10, 20, 93, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.open_slide)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(110, 20, 141, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.segment)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(530, 20, 171, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(800, 50, 31, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setEnabled(True)
        self.progressBar.setGeometry(QtCore.QRect(10, 60, 361, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setVisible(False)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(970, 20, 111, 28))
        self.pushButton_3.clicked.connect(self.apply_threshold)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.graphicsView = MyView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(10, 100, 1800, 1090))
        self.graphicsView.setObjectName("graphicsView")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(860, 20, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.apply_threshold)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1818, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.scene = None
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self._zoom = 0
        self.slide = None
        self.filename = None
        self.dim = None
        self.levels = None

        self.cvimage = None
        self.cvmask = None

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "NYU Langone Health - CBRD AI"))
        self.pushButton.setText(_translate("MainWindow", "Open"))
        self.pushButton_2.setText(_translate("MainWindow", "Start Segmentation"))
        self.label_4.setText(_translate("MainWindow", "Confidence Score Threshold"))
        self.label_5.setText(_translate("MainWindow", "0.95"))
        self.pushButton_3.setText(_translate("MainWindow", "Save annotation"))
        self.pushButton_4.setText(_translate("MainWindow", "Apply"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))

    def setpic(self):
        self.scene = QtWidgets.QGraphicsScene()
        pixmap = QPixmap('C:/Users/ghait/Desktop/NYU_Project/21623T_small.png')
        #pixmap = QPixmap('C:/Users/ghait/Desktop/gg.png')
        item = QtWidgets.QGraphicsPixmapItem(pixmap)
        self.scene.addItem(item)
        self.graphicsView.setScene(self.scene)

    def open_slide(self):
        open_dialog = QtWidgets.QFileDialog()
        fileName = None
        if open_dialog.exec_():
            fileName = open_dialog.selectedFiles()[0]

            self.filename = fileName
            print(self.filename)
            start_time = time.time()
            self.slide = slideai.slideai.SlideAi(self.filename)
            print("--- %s seconds ---" % (time.time() - start_time))
            self.dim = self.slide.dimensions
            self.levels = self.slide.level_count
            self.statusbar.showMessage('Open file: ' + self.filename + ", dim:" + str(self.dim) + ", levels: " + str(self.levels))

    def segment(self):
        filename = self.filename
        if (not exists(filename[:-4]+"_mask.png") and (not exists(filename[:-4] + ".png"))):
            self.progressBar.setVisible(True)
            self.segment_thread = QThread()
            self.segment_worker = WsiSegmentWorker()
            self.segment_worker.moveToThread(self.segment_thread)
            self.segment_thread.started.connect(self.segment_worker.run)
            self.segment_worker.finished.connect(self.segment_thread.quit)
            self.segment_worker.finished.connect(self.segment_worker.deleteLater)
            self.segment_thread.finished.connect(self.segment_thread.deleteLater)
            self.segment_worker.progress.connect(self.updatebar)
            self.segment_thread.start()

        if exists(filename[:-4] + "_mask.png") and exists(filename[:-4] + ".png"):
            image_file = filename[:-4] + ".png"
            mask_file = filename[:-4] + "_mask.png"
            self.cvimage = cv.imread(image_file)
            self.cvmask = cv.imread(mask_file, cv.CV_8UC1)

            mask_at_threshold = self.cvmask > ((self.horizontalSlider.value() / 100) * 255)
            mask_at_threshold = np.uint8(mask_at_threshold)
            mask_at_threshold = cv.dilate(mask_at_threshold, cv.getStructuringElement(cv.MORPH_RECT, (20, 20)))
            contours, _ = cv.findContours(mask_at_threshold, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)

            annoted_img = cv.drawContours(copy.deepcopy(self.cvimage), contours, -1, (15, 255, 0), 20)
            h, w, c = annoted_img.shape
            bytesPerLine = 3 * w
            qImg = QImage(annoted_img.data, w, h, bytesPerLine, QImage.Format_RGB888)
            qPix = QPixmap.fromImage(qImg)
            self.scene = QtWidgets.QGraphicsScene()
            item = QtWidgets.QGraphicsPixmapItem(qPix)
            self.scene.addItem(item)
            self.graphicsView.setScene(self.scene)
            self.graphicsView.setTransformationAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
            self.graphicsView.setResizeAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
            self.graphicsView.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
            self.graphicsView.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
            self.graphicsView.setTransform(QtGui.QTransform().scale(0.01, 0.01).rotate(0))
            self.graphicsView.updateView()

    def updatebar(self, value):
        self.progressBar.setValue(value)


    def apply_threshold(self):

        mask_at_threshold = self.cvmask > ((self.horizontalSlider.value() / 100) * 255)



        mask_at_threshold = np.uint8(mask_at_threshold)
        mask_at_threshold = cv.dilate(mask_at_threshold, cv.getStructuringElement(cv.MORPH_RECT, (20, 20)))
        contours, _ = cv.findContours(mask_at_threshold, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)

        annoted_img = cv.drawContours(copy.deepcopy(self.cvimage), contours, -1, (15, 255, 0), 20)

        plt.imshow(self.cvimage)
        plt.show()

        h, w, c = annoted_img.shape
        bytesPerLine = 3 * w
        qImg = QImage(annoted_img.data, w, h, bytesPerLine, QImage.Format_RGB888)
        qPix = QPixmap.fromImage(qImg)
        self.graphicsView.viewport().update()
        self.scene.clear()

        self.scene = QtWidgets.QGraphicsScene()
        item = QtWidgets.QGraphicsPixmapItem(qPix)
        self.scene.addItem(item)
        self.graphicsView.setScene(self.scene)
        self.graphicsView.setTransformationAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
        self.graphicsView.setResizeAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
        self.graphicsView.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.graphicsView.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.graphicsView.setTransform(QtGui.QTransform().scale(0.01, 0.01).rotate(0))
        self.graphicsView.updateView()

    def slider_changed(self):
        self.label_5.setText(QtCore.QCoreApplication.translate("MainWindow", str(self.horizontalSlider.value()/100)))





if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    splash = Ui_Form()
    splash.setupUi(Form)
    Form.show()

    app.processEvents()
    time.sleep(3)
    Form.close()
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
